components:
  schemas:
    User:
      type: object
      required:
        - username
        - fullname
        - password
        - email
        - role
        - address
        - phone
      properties:
        id:
          type: integer
          description: The auto-generated id of the user
        username:
          type: string
          description: The username
        fullname:
          type: string
          description: The user fullname
        dob:
          type: string
          format: date
          description: The user date of birth
        password:
          type: string
          description: The user password
        role:
          type: array
          items:
            type: string
          description: User roles
        address:
          type: string
          description: The user address
        email:
          type: string
          format: email
          description: The user email
        profile_picture:
          type: string
          description: The user profile picture
        phone:
          type: string
          description: The user phone number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 0
        message:
          type: string
          example: "Invalid field_name format"
        details:
          type: string
          example: "Request is invalid during validation"
        validationErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "field_name"
              message:
                type: string
                example: "Invalid field_name format"
        stackTrace:
          type: string
          nullable: true
          example: null
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              type: integer
              example: 403
            message:
              type: string
              example: "Forbidden"
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              type: integer
              example: 401
            message:
              type: string
              example: "Unauthorized"
    Response:
      type: object
      properties:
        result:
          type: object
          nullable: true
          example: null
        targetUrl:
          type: string
          nullable: true
          example: null
        success:
          type: boolean
          default: false
        error:
          oneOf:
            - $ref: '#/components/schemas/ForbiddenError'
            - $ref: '#/components/schemas/UnauthorizedError'
            - $ref: '#/components/schemas/Error'
        unAuthorizedRequest:
          type: boolean
          default: false
        __abp:
          type: boolean
          default: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [process.env.JWT_TOKEN_AUTH]

paths:
  /users:
    get:
      tags:
        - Users
      summary: Returns all users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"

    post:
      tags:
        - Users
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - fullname
                - password
                - email
                - phone
              properties:
                username:
                  type: string
                  example: "User A"
                fullname:
                  type: string
                  example: "New User"
                password:
                  type: string
                  example: "password123"
                email:
                  type: string
                  example: "abc@gmail.com"
                phone:
                  type: string
                  example: "1234567890"

      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /users/search:
    get:
      tags:
        - Users
      summary: Search users by name
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
          description: Search query
      responses:
        "200":
          description: User found successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"

    patch:
      tags:
        - Users
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                fullname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"

    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"

  /users/{id}/roles/{role}:
    patch:
      tags:
        - Users
      summary: Update user role
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: array
                  items:
                    type: string
                  example: ["admin"]
      responses:
        "200":
          description: User role updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
